{"id":"shaders/fragment.glsl","dependencies":[{"name":"/Users/jodygs/package.json","includedInParent":true,"mtime":1677438315891}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float uTime;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\n\\nvarying vec2 vUv;\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n  vec2 tempUV = uv - vec2(0.5);\\n\\n  float quadAspect = quadSize.x / quadSize.y;\\n  float textureAspect = textureSize.x / textureSize.y;\\n  if(quadAspect < textureAspect){\\n    tempUV = tempUV * vec2(quadAspect / textureAspect, 1.0);\\n  } else {\\n        tempUV = tempUV * vec2(1.0, textureAspect / quadAspect);\\n  }\\n\\n  tempUV += vec2(0.5);\\n  return tempUV;\\n}\\n\\nvoid main() {\\n  vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n  vec4 image = texture(uTexture, correctUV);\\n\\n  gl_FragColor = vec4(vUv, 0.0, 1.0);\\n  gl_FragColor = image;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shaders/fragment.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shaders/fragment.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shaders/fragment.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":791},"source":"shaders/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"shaders/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float uTime;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\n\\nvarying vec2 vUv;\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n  vec2 tempUV = uv - vec2(0.5);\\n\\n  float quadAspect = quadSize.x / quadSize.y;\\n  float textureAspect = textureSize.x / textureSize.y;\\n  if(quadAspect < textureAspect){\\n    tempUV = tempUV * vec2(quadAspect / textureAspect, 1.0);\\n  } else {\\n        tempUV = tempUV * vec2(1.0, textureAspect / quadAspect);\\n  }\\n\\n  tempUV += vec2(0.5);\\n  return tempUV;\\n}\\n\\nvoid main() {\\n  vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n  vec4 image = texture(uTexture, correctUV);\\n\\n  gl_FragColor = vec4(vUv, 0.0, 1.0);\\n  gl_FragColor = image;\\n}\";"},"lineCount":null}},"error":null,"hash":"78023aa3d4c6326b16a0b76b099caef1","cacheData":{"env":{}}}